name: Build and Deploy BitsDraw

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        profile: minimal
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
        
    - name: Install wasm-pack
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Verify wasm-pack installation
      run: wasm-pack --version
      
    - name: Build project
      run: |
        chmod +x ./build.sh
        ./build.sh
        
    - name: List built files
      run: |
        echo "üìÇ Built files in docs/:"
        find docs -type f | head -20
        echo "Total files: $(find docs -type f | wc -l)"
        echo "Total size: $(du -sh docs | cut -f1)"
        
    - name: Run additional tests
      run: |
        echo "üß™ Running integration tests..."
        
        # Check if critical files exist
        test -f docs/index.html || (echo "‚ùå Missing index.html" && exit 1)
        test -f docs/main.js || (echo "‚ùå Missing main.js" && exit 1)
        test -f docs/style.css || (echo "‚ùå Missing style.css" && exit 1)
        test -f docs/wasm/bitsdraw_wasm.js || (echo "‚ùå Missing WASM JS" && exit 1)
        test -f docs/wasm/bitsdraw_wasm_bg.wasm || (echo "‚ùå Missing WASM binary" && exit 1)
        test -f docs/manifest.json || (echo "‚ùå Missing PWA manifest" && exit 1)
        test -f docs/sw.js || (echo "‚ùå Missing service worker" && exit 1)
        
        echo "‚úÖ All critical files present"
        
        # Check WASM file size (should be reasonable)
        WASM_SIZE=$(wc -c < docs/wasm/bitsdraw_wasm_bg.wasm)
        echo "WASM binary size: $WASM_SIZE bytes"
        
        if [ $WASM_SIZE -lt 1000 ]; then
          echo "‚ùå WASM file suspiciously small"
          exit 1
        fi
        
        if [ $WASM_SIZE -gt 1000000 ]; then
          echo "‚ö†Ô∏è WASM file quite large: $WASM_SIZE bytes"
        fi
        
        echo "‚úÖ Integration tests passed"
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        force_orphan: true
        
    - name: Create deployment summary
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Build Status**: Success" >> $GITHUB_STEP_SUMMARY
        echo "üì¶ **WASM Module**: Built and optimized" >> $GITHUB_STEP_SUMMARY
        echo "üì± **PWA Support**: Enabled" >> $GITHUB_STEP_SUMMARY
        echo "‚ö° **Service Worker**: Generated" >> $GITHUB_STEP_SUMMARY
        echo "üìä **Total Size**: $(du -sh docs | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "üìÅ **Files**: $(find docs -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üåê **Live URL**: https://${{ github.repository_owner }}.github.io/$(basename ${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Features Enabled:" >> $GITHUB_STEP_SUMMARY
        echo "- ü¶Ä WASM-accelerated image processing" >> $GITHUB_STEP_SUMMARY
        echo "- üé® Alpha layer transparency support" >> $GITHUB_STEP_SUMMARY
        echo "- üì± Progressive Web App capabilities" >> $GITHUB_STEP_SUMMARY
        echo "- ‚ö° Offline functionality" >> $GITHUB_STEP_SUMMARY
        echo "- üéÆ Playdate PDI export format" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        echo "üîç Running security checks..."
        
        # Check for sensitive files
        if find . -name "*.key" -o -name "*.pem" -o -name ".env" | grep -q .; then
          echo "‚ùå Sensitive files detected"
          exit 1
        fi
        
        # Check for hardcoded secrets in source
        if grep -r "password\|secret\|token\|key" --include="*.js" --include="*.rs" . | grep -v "//\|#\|console.log"; then
          echo "‚ö†Ô∏è Potential secrets found in source code"
          # Don't fail on this, just warn
        fi
        
        echo "‚úÖ Security scan completed"

  performance-check:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: |
        # Wait a bit for deployment to propagate
        sleep 30
        
        # Run Lighthouse audit (if deployment is accessible)
        SITE_URL="https://${{ github.repository_owner }}.github.io/$(basename ${{ github.repository }})"
        echo "üîç Running Lighthouse audit on: $SITE_URL"
        
        # Create Lighthouse config
        cat > lighthouse.config.js << 'EOF'
        module.exports = {
          ci: {
            collect: {
              numberOfRuns: 1,
              url: process.env.SITE_URL
            },
            assert: {
              assertions: {
                'categories:performance': ['warn', {minScore: 0.8}],
                'categories:accessibility': ['error', {minScore: 0.9}],
                'categories:best-practices': ['warn', {minScore: 0.8}],
                'categories:seo': ['warn', {minScore: 0.8}]
              }
            }
          }
        };
        EOF
        
        # Run audit (allow failures for now)
        SITE_URL="$SITE_URL" lhci autorun --config=./lighthouse.config.js || echo "‚ö†Ô∏è Lighthouse audit completed with warnings"